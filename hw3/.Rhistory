# This is called whenever the inputs change. The output
# functions defined below then all use the value computed from
# this expression
data <- reactive({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
data.frame(x = dist(input$n))
})
# Generate a plot of the data. Also uses the inputs to build
# the plot label. Note that the dependencies on both the inputs
# and the data reactive expression are both tracked, and
# all expressions are called in the sequence implied by the
# dependency graph
output$plot <- renderPlot({
dist <- input$dist
n <- input$n
histogram( ~x, data = data(),
main=paste('r', dist, '(', n, ')', sep=''))
})
# Generate a summary of the data
output$summary <- renderPrint({
favstats(~x, data = data())
})
# Generate an HTML table view of the data
output$table <- renderTable({
data()
})
library(shiny)
library(mosaic)
options(digits = 4)
# Define server logic for random distribution application
function(input, output) {
# Reactive expression to generate the requested distribution.
# This is called whenever the inputs change. The output
# functions defined below then all use the value computed from
# this expression
data <- reactive({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
data.frame(x = dist(input$n))
})
# Generate a plot of the data. Also uses the inputs to build
# the plot label. Note that the dependencies on both the inputs
# and the data reactive expression are both tracked, and
# all expressions are called in the sequence implied by the
# dependency graph
output$plot <- renderPlot({
dist <- input$dist
n <- input$n
histogram( ~x, data = data(),
main=paste('r', dist, '(', n, ')', sep=''))
})
# Generate a summary of the data
output$summary <- renderPrint({
favstats(~x, data = data())
})
# Generate an HTML table view of the data
output$table <- renderTable({
data()
})
}
tab = mosiac(ftable(df$released,df$colour))
install.packages(“DBI”)
install.packages(“dplyr”)
install.packages(“DBI”)
install.packages(“dplyr”)
install.packages(“ggplot”)
install.packages(“DBI”)
install.packages(“ggplot”)
library("mosaic")
install.packages("mosaic", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("mosaic", lib = "/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
library(dplyr)
library(vcd)
library(stats)
library(grid)
library(graphics)
df =  read.csv("D:/Data Mining/hw3/Arrests.csv")
head(df)
df1 = as.matrix(df)
t = table(df[,2],df1[,3])
t
p_br = t[2,1]/sum(t[2,1]+t[2,2])
p_br
p_wr = t[2,2]/sum(t[2,1]+t[2,2])
p_wr
tab = mosiac(t)
library("mosaic", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
tab = mosiac(t)
geom_mosaic
?geom_mosaic
library(ggplot)
library(ggplot2)
ggplot(data=df) +
geom_mosaic(aes(weight=Freq, x=colour, fill=released))
library(ggmosaic)
ggplot(data=df) +
geom_mosaic(aes(weight=Freq, x=colour, fill=released))
ggplot(data=df) +
geom_mosaic(aes(weight=Freq, x=df[,3], fill=df[,2]))
ggplot(data=df) +
geom_mosaic(aes(x=df[,3], fill=df[,2]))
ggplot(data=df) +
geom_mosaic(aes(x=product(released,colour))
ggplot(data=df) +
ggplot2(data=df) +
geom_mosaic(aes(x=product(released,colour))
ggplot2(data=df) +
ggplot2(data=df) +
geom_mosaic(aes(x=product(df[,2],df[,3])
ggplot2(data=df) +
ggplot2(data=df) +
geom_mosaic(aes(x=product(df[,2],df[,3])
zz
data("UCBAdmissions")
mosaicplot(UCBAdmissions, sort = 3:1,
col = hcl(c(120, 10)),
main = "Student admissions at UC Berkeley")
mosaicplot(t)
mosaicplot(t)
tab = mosaicplot(t)
tab = mosaicplot(t)
tab
t
tab
tab = mosaicplot(t)
tab
df =  read.csv("D:/Data Mining/hw3/Arrests.csv")
head(df)
t = table(df[,2],df[,3])
t
p_br = t[2,1]/sum(t[2,1]+t[2,2])
p_br
p_wr = t[2,2]/sum(t[2,1]+t[2,2])
p_wr
tab = mosaicplot(table(df[,3],df1[,2]))
tab
df =  read.csv("D:/Data Mining/hw3/Arrests.csv")
head(df)
t = table(df[,2],df[,3])
t
p_br = t[2,1]/sum(t[2,1]+t[2,2])
p_br
p_wr = t[2,2]/sum(t[2,1]+t[2,2])
p_wr
tab = mosaicplot(table(df[,3],df1[,2]))
tab
?mosaicplot
tab = mosaicplot(table(df[,3],df1[,2]),xlab=colour,ylab=released)
tab = mosaicplot(table(df[,3],df1[,2]),xlab="colour",ylab="released")
tab
mosaicplot(table(df[,3],df1[,2]),xlab="colour",ylab="released")
labeling_cells(text = table(df[,3],df1[,2]))
mosaicplot(table(df[,3],df1[,2]),xlab="colour",ylab="released")
labeling_cells(text = table(df[,3],df1[,2]),margin = 0)
mosaicplot(table(df[,3],df1[,2]),xlab="colour",ylab="released",shade=True)
mosaicplot(table(df[,3],df1[,2]),xlab="colour",ylab="released",shade=TRUE)
mosaic(table(df[,3],df1[,2]),xlab="colour",ylab="released")
mosaic(table(df[,3],df1[,2]))
mosaic(table(df[,3],df[,2]))
mosaicplot(table(df[,3],df[,2]),xlab="colour",ylab="released",shade=TRUE)
mosaicplot(table(df[,3],df[,2]),xlab="colour",ylab="released")
head(df)
df1 = df[df$employed == 'Yes']
df1 = df[df$employed == 'Yes',]
df1 = df[df$employed == 'Yes',]
df2 = df[df$employed == 'No',]
head(df1)
t1 = table(df1[,2],df[,3])
t1 = table(df1[,2],df1[,3])
t1
t1 = table(df1[,2],df1[,3])
t1
t2 = table(df2[,2],df2[,3])
t2
tab1 = mosaicplot(table(df1[,3],df1[,2]),xlab="colour_employed",ylab="released_employed")
tab1 = mosaicplot(table(df1[,3],df1[,2]),xlab="colour_employed",ylab="released_employed")
tab1
tab1 = mosaicplot(table(df1[,3],df1[,2]),xlab="colour_employed",ylab="released_employed")
tab1
tab2 = mosaicplot(table(df2[,3],df2[,2]),xlab="colour_notemployed",ylab="released_notemployed")
tab2
t11 = table(c(df1[,2],df1[,3]),df1[,7])
?apply
df1$R_C = paste(df1$released, df1$colour, sep="_")
View(df1)
View(df1)
df1$R_C = paste(df1$released, df1$colour, sep="_")
df2$R_C = paste(df2$released, df2$colour, sep="_")
t11 = table(df1$R_C)
t11
t11 = table(df1$R_C)
t11
t22 = table(df2$R_C)
t22
t11[3]
sum(t11)
t11[1] + t11[2] + t11[3] +t11[4]
a = t11[3]/sum(t11)
a
t1
sum(t1)
b = (t1[2,1]+t1[2,2])/sum(t1)
b
c = (t1[1,1]+t1[2,1])/sum(t1)
c
b*c
a
View(df)
View(df)
table(df$checks)
mosaicplot(df1)
mosaicplot(table(df1))
mosaicplot(table(df[,3],df[,2]),xlab="colour",ylab="released")
mosaicplot(table(df[,3],df[,2]),xlab="colour",ylab="released")
table(c(df[,2],df[,3]),df[,7])
table(df[,c(released,colour)],df[,employed])
table(df[,c(2,3)],df[,7])
table(df[,c(2,3)])
table(df[,c(2,3,7)])
tab = table(df[,c(2,3,7)])
tab
apply(tab,3,sum)
mosaicplot(tab)
tab = table(df[,c(7,2,3)])
tab
mosaicplot(tab)
tab = table(df[,c(2,7,3)])
tab
mosaicplot(tab)
apply(tab,3,sum)
tab = table(df[,c(2,7,3)])
tab
mosaicplot(tab)
apply(tab,2,sum)
tab = table(df[,c(2,7,3)])
tab
mosaicplot(tab)
tab1 = table(df[,c(2,9,3)])
tab1
mosaicplot(tab1)
tab = table(df[,c(2,7,3)])
tab
mosaicplot(tab)
apply(tab,2,sum)
tab = table(df[,c(2,7,3)])
tab
mosaicplot(tab)
tab1 = table(df[,c(2,9,3)])
tab1
mosaicplot(tab1)
tab2 = table(df[,c(2,3)])
tab2
mosaicplot(tab12)
mosaicplot(tab2)
?rexp
a = rexp(1000,1)
plot(ecdf(a))
summary(a)
b = ecdf(a)
b
plot(b)
b = ecdf(a)
b
length(ecdf(a))
b.ecdf = ecdf(a)
b = b.edcf(sort(a))
b = ecdf(a)
b1 = b(sort(a))
plot(b1)
a1 = rnorm(1000)
b1 = ecdf(a1)
b = ecdf(a)
b1 = b(sort(a))
plot(b1)
a1 = rnorm(1000)
b2 = ecdf(a1)
b3 = b2(sort(a1))
plot(b3)
density(b3)
d = density(b3)
plot(d)
d = density(b3)
plot(d)
d1 = density(b1)
plot(d1)
a1 = runif(1000)
b2 = ecdf(a1)
b3 = b2(sort(a1))
plot(b3)
d = density(b3)
plot(d)
d1 = density(b1)
plot(d1)
sumary(a)
summary(a)
summar(a1)
summary(a1)
knitr::opts_chunk$set(echo = TRUE)
x = runif(n=1000,min=-4,max=4)
y = -x
z = rep.int(1,1000)
X = data.frame(x,y,z)
cov = cov(X)
svd = svd(cov)
U = svd$u
D = diag(svd$d)
U
D
library("mosaic", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("mosaic")
library(dplyr)
library(vcd)
library(stats)
library(grid)
library(graphics)
library(ggplot2)
library(ggmosaic)
df =  read.csv("D:/Data Mining/hw3/Arrests.csv")
head(df)
t = table(df[,2],df[,3])
t
p_br = t[2,1]/sum(t[2,1]+t[2,2])
p_br
p_wr = t[2,2]/sum(t[2,1]+t[2,2])
p_wr
mosaicplot(table(df[,3],df[,2]),xlab="colour",ylab="released")
summary(a)
a = rexp(1000,1)
plot(ecdf(a))
b = ecdf(a)
b1 = b(sort(a))
plot(b1)
a1 = runif(1000)
b2 = ecdf(a1)
b3 = b2(sort(a1))
plot(b3)
d = density(b3)
plot(d)
d1 = density(b1)
plot(d1)
df =  read.csv("D:/Data Mining/hw3/time_series.csv")
head(df)
df =  read.csv("D:/Data Mining/hw3/time_series.csv")
head(df)
ts(df)
plot(ts(df))
library(reshape2)
library(ggplot2)
df$metadata = row.names(df)
View(df)
View(df)
df = melt(df, "metadata")
View(df)
View(df)
ggplot(df, aes(variable, value, group = metadata, color = metadata)) +
geom_line()
ggplot(df, aes(variable, value, group = metadata, color = metadata)) +
geom_line()
df =  read.csv("D:/Data Mining/hw3/time_series.csv")
head(df)
df =  read.csv("D:/Data Mining/hw3/time_series.csv")
head(df)
a = df
df$metadata = row.names(df)
df = melt(df, "metadata")
ggplot(df, aes(variable, value, group = metadata, color = metadata)) +
geom_line()
corr(t(a[-1]))
cor(t(a[-1]))
plot(cor(t(a[-1])))
plot(cor(t(a[-2])))
t(a[-1])
head(a)
for (i in 1:ncol(a))
print(i)
head(a)
ggplot(df, aes(variable, value, group = metadata, color = metadata)) +
geom_line()
View(a)
View(a)
a1 = t(a)
View(a1)
View(a1)
knitr::opts_chunk$set(echo = TRUE)
library("mosaic")
library(dplyr)
library(vcd)
library(stats)
library(grid)
library(graphics)
library(ggplot2)
library(ggmosaic)
df =  read.csv("D:/Data Mining/hw3/Arrests.csv")
head(df)
t = table(df[,2],df[,3])
t
p_br = t[2,1]/sum(t[2,1]+t[2,2])
p_br
p_wr = t[2,2]/sum(t[2,1]+t[2,2])
p_wr
mosaicplot(table(df[,3],df[,2]),xlab="colour",ylab="released")
tab = table(df[,c(2,7,3)])
tab
mosaicplot(tab)
df1 = df[df$employed == 'Yes',]
df2 = df[df$employed == 'No',]
head(df1)
t1 = table(df1[,2],df1[,3])
t1
t2 = table(df2[,2],df2[,3])
t2
df1$R_C = paste(df1$released, df1$colour, sep="_")
df2$R_C = paste(df2$released, df2$colour, sep="_")
t11 = table(df1$R_C)
t11
t22 = table(df2$R_C)
t22
a = t11[3]/sum(t11)
a
b = (t1[2,1]+t1[2,2])/sum(t1)
b
c = (t1[1,1]+t1[2,1])/sum(t1)
c
tab1 = mosaicplot(table(df1[,3],df1[,2]),xlab="colour_employed",ylab="released_employed")
tab1
tab2 = mosaicplot(table(df2[,3],df2[,2]),xlab="colour_notemployed",ylab="released_notemployed")
tab2
p = 1-pbinom(7,25,0.2)
1 - pbinom(0,21,p)
library(reshape2)
library(ggplot2)
df =  read.csv("D:/Data Mining/hw3/time_series.csv")
head(df)
a = df
a = t(df)
head(a)
diff_df = a[-1,]-a[-nrow(a),]
View(diff_df)
View(diff_df)
plot(diff_df)
for (c in diff_df)
plot(c,type="l")
df_t  = t(diff_df)
View(df_t)
View(df_t)
ggplot(df_t, aes(variable, value, group = metadata, color = metadata)) +
geom_line()
df_t$metadata = row.names(df_t)
View(df_t)
View(df_t)
df_t = melt(df_t, "metadata")
View(df_t)
View(df_t)
ggplot(df_t, aes(variable, value, group = metadata, color = metadata)) +
geom_line()
df_t  = t(diff_df)
View(df_t)
View(df_t)
matplot(rownames(diff_df), diff_-df, type='l', xlab='V', ylab='diff', col=1:ncol(diff_df))
matplot(rownames(diff_df), diff_df, type='l', xlab='V', ylab='diff', col=1:ncol(diff_df))
melt(diff_df)
ggplot(melt(diff_df), aes(x=Var1, y=value, col=Var2))+
geom_line()
log_df = log(df)
library(forecast)
library(forecast)
install.packages("forecast")
library(forecast)
library(fpp2)
install.packages("fpp2")
library(fpp2)
ggseasonplot(a)
ggseasonplot(ts(a))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
data =  read.csv("D:/Data Mining/hw2/rachmaninov_pc2_onset.csv")
plot_data = reshape(data, varying = list(names(data)[2:13]),v.names = "onset_time", idvar = c("X"),timevar = "notes",direction="long" ,sep = "")
plot(plot_data[,2:3])
View(data)
View(data)
View(plot_data)
View(plot_data)
View(df)
View(df)
plot_data = reshape(df, varying = list(names(df)[1:50]),v.names = "values", idvar = c("X"),timevar = "v",direction="long" ,sep = "")
View(plot_data)
View(plot_data)
plot_data = reshape(df, varying = list(names(df)[1:200]),v.names = "values", idvar = c("X"),timevar = "v",direction="long" ,sep = "")
plot(plot_data[,2:3])
plot(plot_data[,2:3],type = "l")
plot(plot_data[,2:3],type = "b")
plot(plot_data[,2:3],type = "h")
plot(plot_data[,2:3],type = "s")
plot(plot_data[,2:3])
dnorm(1)
dnorm(3)
dnorm(.95)
?dnorm
round(qnorm(0.025),3)
round(qnorm(0.95),3)
